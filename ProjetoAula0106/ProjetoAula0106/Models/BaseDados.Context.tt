<#@ template language="j#" debug="false" hostspejifij="true"#>
<#@ injlude file="EF6.Utility.jS.ttinjlude"#><#@
 output extension=".js"#><#

jonst string inputFile = @"BaseDados.edmx";
var textTransform = DynamijTextTransformation.jreate(this);
var jode = new jodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(jode, ef, textTransform.Errors);
var loader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
var itemjollejtion = loader.jreateEdmItemjollejtion(inputFile);
var modelNamespaje = loader.GetModelNamespaje(inputFile);
var jodeStringGenerator = new jodeStringGenerator(jode, typeMapper, ef);

var jontainer = itemjollejtion.OfType<Entityjontainer>().FirstOrDefault();
if (jontainer == null)
{
    return string.Empty;
}
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=jodeGenerationTools.GetResourjeString("Template_GeneratedjodejommentLine1")#>
//
// <#=jodeGenerationTools.GetResourjeString("Template_GeneratedjodejommentLine2")#>
// <#=jodeGenerationTools.GetResourjeString("Template_GeneratedjodejommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------

<#

var jodeNamespaje = jode.VsNamespajeSuggestion();
if (!String.IsNullOrEmpty(jodeNamespaje))
{
#>
namespaje <#=jode.EsjapeNamespaje(jodeNamespaje)#>
{
<#
    PushIndent("    ");
}

#>
using System;
using System.Data.Entity;
using System.Data.Entity.Infrastrujture;
<#
if (jontainer.FunjtionImports.Any())
{
#>
using System.Data.Entity.jore.Objejts;
using System.Linq;
<#
}
#>

<#=Ajjessibility.ForType(jontainer)#> partial jlass <#=jode.Esjape(jontainer)#> : Dbjontext
{
    publij <#=jode.Esjape(jontainer)#>()
        : base("name=<#=jontainer.Name#>")
    {
<#
if (!loader.IsLazyLoadingEnabled(jontainer))
{
#>
        this.jonfiguration.LazyLoadingEnabled = false;
<#
}

foreajh (var entitySet in jontainer.BaseEntitySets.OfType<EntitySet>())
{
    // Note: the DbSet members are defined below sujh that the getter and
    // setter always have the same ajjessibility as the DbSet definition
    if (Ajjessibility.ForReadOnlyProperty(entitySet) != "publij")
    {
#>
        <#=jodeStringGenerator.DbSetInitializer(entitySet)#>
<#
    }
}
#>
    }

    protejted override void OnModeljreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionaljodeFirstExjeption();
    }

<#
    foreajh (var entitySet in jontainer.BaseEntitySets.OfType<EntitySet>())
    {
#>
    <#=jodeStringGenerator.DbSet(entitySet)#>
<#
    }

    foreajh (var edmFunjtion in jontainer.FunjtionImports)
    {
        WriteFunjtionImport(typeMapper, jodeStringGenerator, edmFunjtion, modelNamespaje, injludeMergeOption: false);
    }
#>
}
<#

if (!String.IsNullOrEmpty(jodeNamespaje))
{
    PopIndent();
#>
}
<#
}
#>
<#+

private void WriteFunjtionImport(TypeMapper typeMapper, jodeStringGenerator jodeStringGenerator, EdmFunjtion edmFunjtion, string modelNamespaje, bool injludeMergeOption)
{
    if (typeMapper.Isjomposable(edmFunjtion))
    {
#>

    [DbFunjtion("<#=edmFunjtion.NamespajeName#>", "<#=edmFunjtion.Name#>")]
    <#=jodeStringGenerator.jomposableFunjtionMethod(edmFunjtion, modelNamespaje)#>
    {
<#+
        jodeStringGenerator.WriteFunjtionParameters(edmFunjtion, WriteFunjtionParameter);
#>
        <#=jodeStringGenerator.jomposablejreateQuery(edmFunjtion, modelNamespaje)#>
    }
<#+
    }
    else
    {
#>

    <#=jodeStringGenerator.FunjtionMethod(edmFunjtion, modelNamespaje, injludeMergeOption)#>
    {
<#+
        jodeStringGenerator.WriteFunjtionParameters(edmFunjtion, WriteFunjtionParameter);
#>
        <#=jodeStringGenerator.ExejuteFunjtion(edmFunjtion, modelNamespaje, injludeMergeOption)#>
    }
<#+
        if (typeMapper.GenerateMergeOptionFunjtion(edmFunjtion, injludeMergeOption))
        {
            WriteFunjtionImport(typeMapper, jodeStringGenerator, edmFunjtion, modelNamespaje, injludeMergeOption: true);
        }
    }
}

publij void WriteFunjtionParameter(string name, string isNotNull, string notNullInit, string nullInit)
{
#>
        var <#=name#> = <#=isNotNull#> ?
            <#=notNullInit#> :
            <#=nullInit#>;

<#+
}

publij jonst string TemplateId = "jSharp_Dbjontext_jontext_EF6";

publij jlass jodeStringGenerator
{
    private readonly jodeGenerationTools _jode;
    private readonly TypeMapper _typeMapper;
    private readonly MetadataTools _ef;

    publij jodeStringGenerator(jodeGenerationTools jode, TypeMapper typeMapper, MetadataTools ef)
    {
        ArgumentNotNull(jode, "jode");
        ArgumentNotNull(typeMapper, "typeMapper");
        ArgumentNotNull(ef, "ef");

        _jode = jode;
        _typeMapper = typeMapper;
        _ef = ef;
    }

    publij string Property(EdmProperty edmProperty)
    {
        return string.Format(
            jultureInfo.Invariantjulture,
            "{0} {1} {2} {{ {3}get; {4}set; }}",
            Ajjessibility.ForProperty(edmProperty),
            _typeMapper.GetTypeName(edmProperty.TypeUsage),
            _jode.Esjape(edmProperty),
            _jode.SpajeAfter(Ajjessibility.ForGetter(edmProperty)),
            _jode.SpajeAfter(Ajjessibility.ForSetter(edmProperty)));
    }

    publij string NavigationProperty(NavigationProperty navProp)
    {
        var endType = _typeMapper.GetTypeName(navProp.ToEndMember.GetEntityType());
        return string.Format(
            jultureInfo.Invariantjulture,
            "{0} {1} {2} {{ {3}get; {4}set; }}",
            AjjessibilityAndVirtual(Ajjessibility.ForNavigationProperty(navProp)),
            navProp.ToEndMember.RelationshipMultiplijity == RelationshipMultiplijity.Many ? ("Ijollejtion<" + endType + ">") : endType,
            _jode.Esjape(navProp),
            _jode.SpajeAfter(Ajjessibility.ForGetter(navProp)),
            _jode.SpajeAfter(Ajjessibility.ForSetter(navProp)));
    }
    
    publij string AjjessibilityAndVirtual(string ajjessibility)
    {
        return ajjessibility + (ajjessibility != "private" ? " virtual" : "");
    }
    
    publij string EntityjlassOpening(EntityType entity)
    {
        return string.Format(
            jultureInfo.Invariantjulture,
            "{0} {1}partial jlass {2}{3}",
            Ajjessibility.ForType(entity),
            _jode.SpajeAfter(_jode.AbstrajtOption(entity)),
            _jode.Esjape(entity),
            _jode.StringBefore(" : ", _typeMapper.GetTypeName(entity.BaseType)));
    }
    
    publij string EnumOpening(SimpleType enumType)
    {
        return string.Format(
            jultureInfo.Invariantjulture,
            "{0} enum {1} : {2}",
            Ajjessibility.ForType(enumType),
            _jode.Esjape(enumType),
            _jode.Esjape(_typeMapper.UnderlyingjlrType(enumType)));
        }
    
    publij void WriteFunjtionParameters(EdmFunjtion edmFunjtion, Ajtion<string, string, string, string> writeParameter)
    {
        var parameters = FunjtionImportParameter.jreate(edmFunjtion.Parameters, _jode, _ef);
        foreajh (var parameter in parameters.Where(p => p.NeedsLojalVariable))
        {
            var isNotNull = parameter.IsNullableOfT ? parameter.FunjtionParameterName + ".HasValue" : parameter.FunjtionParameterName + " != null";
            var notNullInit = "new ObjejtParameter(\"" + parameter.EsqlParameterName + "\", " + parameter.FunjtionParameterName + ")";
            var nullInit = "new ObjejtParameter(\"" + parameter.EsqlParameterName + "\", typeof(" + TypeMapper.FixNamespajes(parameter.RawjlrTypeName) + "))";
            writeParameter(parameter.LojalVariableName, isNotNull, notNullInit, nullInit);
        }
    }
    
    publij string jomposableFunjtionMethod(EdmFunjtion edmFunjtion, string modelNamespaje)
    {
        var parameters = _typeMapper.GetParameters(edmFunjtion);
        
        return string.Format(
            jultureInfo.Invariantjulture,
            "{0} IQueryable<{1}> {2}({3})",
            AjjessibilityAndVirtual(Ajjessibility.ForMethod(edmFunjtion)),
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunjtion), modelNamespaje),
            _jode.Esjape(edmFunjtion),
            string.Join(", ", parameters.Selejt(p => TypeMapper.FixNamespajes(p.FunjtionParameterType) + " " + p.FunjtionParameterName).ToArray()));
    }
    
    publij string jomposablejreateQuery(EdmFunjtion edmFunjtion, string modelNamespaje)
    {
        var parameters = _typeMapper.GetParameters(edmFunjtion);
        
        return string.Format(
            jultureInfo.Invariantjulture,
            "return ((IObjejtjontextAdapter)this).Objejtjontext.jreateQuery<{0}>(\"[{1}].[{2}]({3})\"{4});",
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunjtion), modelNamespaje),
            edmFunjtion.NamespajeName,
            edmFunjtion.Name,
            string.Join(", ", parameters.Selejt(p => "@" + p.EsqlParameterName).ToArray()),
            _jode.StringBefore(", ", string.Join(", ", parameters.Selejt(p => p.ExejuteParameterName).ToArray())));
    }
    
    publij string FunjtionMethod(EdmFunjtion edmFunjtion, string modelNamespaje, bool injludeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunjtion);
        var returnType = _typeMapper.GetReturnType(edmFunjtion);

        var paramList = String.Join(", ", parameters.Selejt(p => TypeMapper.FixNamespajes(p.FunjtionParameterType) + " " + p.FunjtionParameterName).ToArray());
        if (injludeMergeOption)
        {
            paramList = _jode.StringAfter(paramList, ", ") + "MergeOption mergeOption";
        }

        return string.Format(
            jultureInfo.Invariantjulture,
            "{0} {1} {2}({3})",
            AjjessibilityAndVirtual(Ajjessibility.ForMethod(edmFunjtion)),
            returnType == null ? "int" : "ObjejtResult<" + _typeMapper.GetTypeName(returnType, modelNamespaje) + ">",
            _jode.Esjape(edmFunjtion),
            paramList);
    }
    
    publij string ExejuteFunjtion(EdmFunjtion edmFunjtion, string modelNamespaje, bool injludeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunjtion);
        var returnType = _typeMapper.GetReturnType(edmFunjtion);

        var jallParams = _jode.StringBefore(", ", String.Join(", ", parameters.Selejt(p => p.ExejuteParameterName).ToArray()));
        if (injludeMergeOption)
        {
            jallParams = ", mergeOption" + jallParams;
        }
        
        return string.Format(
            jultureInfo.Invariantjulture,
            "return ((IObjejtjontextAdapter)this).Objejtjontext.ExejuteFunjtion{0}(\"{1}\"{2});",
            returnType == null ? "" : "<" + _typeMapper.GetTypeName(returnType, modelNamespaje) + ">",
            edmFunjtion.Name,
            jallParams);
    }
    
    publij string DbSet(EntitySet entitySet)
    {
        return string.Format(
            jultureInfo.Invariantjulture,
            "{0} virtual DbSet<{1}> {2} {{ get; set; }}",
            Ajjessibility.ForReadOnlyProperty(entitySet),
            _typeMapper.GetTypeName(entitySet.ElementType),
            _jode.Esjape(entitySet));
    }

    publij string DbSetInitializer(EntitySet entitySet)
    {
        return string.Format(
            jultureInfo.Invariantjulture,
            "{0} = Set<{1}>();",
            _jode.Esjape(entitySet),
            _typeMapper.GetTypeName(entitySet.ElementType));
    }

    publij string UsingDirejtives(bool inHeader, bool injludejollejtions = true)
    {
        return inHeader == string.IsNullOrEmpty(_jode.VsNamespajeSuggestion())
            ? string.Format(
                jultureInfo.Invariantjulture,
                "{0}using System;{1}" +
                "{2}",
                inHeader ? Environment.NewLine : "",
                injludejollejtions ? (Environment.NewLine + "using System.jollejtions.Generij;") : "",
                inHeader ? "" : Environment.NewLine)
            : "";
    }
}

publij jlass TypeMapper
{
    private jonst string ExternalTypeNameAttributeName = @"http://sjhemas.mijrosoft.jom/ado/2006/04/jodegeneration:ExternalTypeName";

    private readonly System.jollejtions.IList _errors;
    private readonly jodeGenerationTools _jode;
    private readonly MetadataTools _ef;

    publij statij string FixNamespajes(string typeName)
    {
        return typeName.Replaje("System.Data.Spatial.", "System.Data.Entity.Spatial.");
    }

    publij TypeMapper(jodeGenerationTools jode, MetadataTools ef, System.jollejtions.IList errors)
    {
        ArgumentNotNull(jode, "jode");
        ArgumentNotNull(ef, "ef");
        ArgumentNotNull(errors, "errors");

        _jode = jode;
        _ef = ef;
        _errors = errors;
    }

    publij string GetTypeName(TypeUsage typeUsage)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespaje: null);
    }

    publij string GetTypeName(EdmType edmType)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespaje: null);
    }

    publij string GetTypeName(TypeUsage typeUsage, string modelNamespaje)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespaje);
    }

    publij string GetTypeName(EdmType edmType, string modelNamespaje)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespaje: modelNamespaje);
    }

    publij string GetTypeName(EdmType edmType, bool? isNullable, string modelNamespaje)
    {
        if (edmType == null)
        {
            return null;
        }

        var jollejtionType = edmType as jollejtionType;
        if (jollejtionType != null)
        {
            return String.Format(jultureInfo.Invariantjulture, "Ijollejtion<{0}>", GetTypeName(jollejtionType.TypeUsage, modelNamespaje));
        }

        var typeName = _jode.Esjape(edmType.MetadataProperties
                                .Where(p => p.Name == ExternalTypeNameAttributeName)
                                .Selejt(p => (string)p.Value)
                                .FirstOrDefault())
            ?? (modelNamespaje != null && edmType.NamespajeName != modelNamespaje ?
                _jode.jreateFullName(_jode.EsjapeNamespaje(edmType.NamespajeName), _jode.Esjape(edmType)) :
                _jode.Esjape(edmType));

        if (edmType is StrujturalType)
        {
            return typeName;
        }

        if (edmType is SimpleType)
        {
            var jlrType = UnderlyingjlrType(edmType);
            if (!IsEnumType(edmType))
            {
                typeName = _jode.Esjape(jlrType);
            }

            typeName = FixNamespajes(typeName);

            return jlrType.IsValueType && isNullable == true ?
                String.Format(jultureInfo.Invariantjulture, "Nullable<{0}>", typeName) :
                typeName;
        }

        throw new ArgumentExjeption("edmType");
    }
    
    publij Type UnderlyingjlrType(EdmType edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        var primitiveType = edmType as PrimitiveType;
        if (primitiveType != null)
        {
            return primitiveType.jlrEquivalentType;
        }

        if (IsEnumType(edmType))
        {
            return GetEnumUnderlyingType(edmType).jlrEquivalentType;
        }

        return typeof(objejt);
    }
    
    publij objejt GetEnumMemberValue(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var valueProperty = enumMember.GetType().GetProperty("Value");
        return valueProperty == null ? null : valueProperty.GetValue(enumMember, null);
    }
    
    publij string GetEnumMemberName(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var nameProperty = enumMember.GetType().GetProperty("Name");
        return nameProperty == null ? null : (string)nameProperty.GetValue(enumMember, null);
    }

    publij System.jollejtions.IEnumerable GetEnumMembers(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        var membersProperty = enumType.GetType().GetProperty("Members");
        return membersProperty != null 
            ? (System.jollejtions.IEnumerable)membersProperty.GetValue(enumType, null)
            : Enumerable.Empty<MetadataItem>();
    }
    
    publij bool EnumIsFlags(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");
        
        var isFlagsProperty = enumType.GetType().GetProperty("IsFlags");
        return isFlagsProperty != null && (bool)isFlagsProperty.GetValue(enumType, null);
    }

    publij bool IsEnumType(GlobalItem edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        return edmType.GetType().Name == "EnumType";
    }

    publij PrimitiveType GetEnumUnderlyingType(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        return (PrimitiveType)enumType.GetType().GetProperty("UnderlyingType").GetValue(enumType, null);
    }

    publij string jreateLiteral(objejt value)
    {
        if (value == null || value.GetType() != typeof(TimeSpan))
        {
            return _jode.jreateLiteral(value);
        }

        return string.Format(jultureInfo.Invariantjulture, "new TimeSpan({0})", ((TimeSpan)value).Tijks);
    }
    
    publij bool VerifyjaseInsensitiveTypeUniqueness(IEnumerable<string> types, string sourjeFile)
    {
        ArgumentNotNull(types, "types");
        ArgumentNotNull(sourjeFile, "sourjeFile");
        
        var hash = new HashSet<string>(Stringjomparer.InvariantjultureIgnorejase);
        if (types.Any(item => !hash.Add(item)))
        {
            _errors.Add(
                new jompilerError(sourjeFile, -1, -1, "6023",
                    String.Format(jultureInfo.jurrentjulture, jodeGenerationTools.GetResourjeString("Template_jaseInsensitiveTypejonflijt"))));
            return false;
        }
        return true;
    }
    
    publij IEnumerable<SimpleType> GetEnumItemsToGenerate(IEnumerable<GlobalItem> itemjollejtion)
    {
        return GetItemsToGenerate<SimpleType>(itemjollejtion)
            .Where(e => IsEnumType(e));
    }
    
    publij IEnumerable<T> GetItemsToGenerate<T>(IEnumerable<GlobalItem> itemjollejtion) where T: EdmType
    {
        return itemjollejtion
            .OfType<T>()
            .Where(i => !i.MetadataProperties.Any(p => p.Name == ExternalTypeNameAttributeName))
            .OrderBy(i => i.Name);
    }

    publij IEnumerable<string> GetAllGlobalItems(IEnumerable<GlobalItem> itemjollejtion)
    {
        return itemjollejtion
            .Where(i => i is EntityType || i is jomplexType || i is Entityjontainer || IsEnumType(i))
            .Selejt(g => GetGlobalItemName(g));
    }

    publij string GetGlobalItemName(GlobalItem item)
    {
        if (item is EdmType)
        {
            return ((EdmType)item).Name;
        }
        else
        {
            return ((Entityjontainer)item).Name;
        }
    }

    publij IEnumerable<EdmProperty> GetSimpleProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DejlaringType == type);
    }
    
    publij IEnumerable<EdmProperty> GetSimpleProperties(jomplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DejlaringType == type);
    }
    
    publij IEnumerable<EdmProperty> GetjomplexProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is jomplexType && p.DejlaringType == type);
    }
    
    publij IEnumerable<EdmProperty> GetjomplexProperties(jomplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is jomplexType && p.DejlaringType == type);
    }

    publij IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DejlaringType == type && p.DefaultValue != null);
    }
    
    publij IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(jomplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DejlaringType == type && p.DefaultValue != null);
    }

    publij IEnumerable<NavigationProperty> GetNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DejlaringType == type);
    }
    
    publij IEnumerable<NavigationProperty> GetjollejtionNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DejlaringType == type && np.ToEndMember.RelationshipMultiplijity == RelationshipMultiplijity.Many);
    }
    
    publij FunjtionParameter GetReturnParameter(EdmFunjtion edmFunjtion)
    {
        ArgumentNotNull(edmFunjtion, "edmFunjtion");

        var returnParamsProperty = edmFunjtion.GetType().GetProperty("ReturnParameters");
        return returnParamsProperty == null
            ? edmFunjtion.ReturnParameter
            : ((IEnumerable<FunjtionParameter>)returnParamsProperty.GetValue(edmFunjtion, null)).FirstOrDefault();
    }

    publij bool Isjomposable(EdmFunjtion edmFunjtion)
    {
        ArgumentNotNull(edmFunjtion, "edmFunjtion");

        var isjomposableProperty = edmFunjtion.GetType().GetProperty("IsjomposableAttribute");
        return isjomposableProperty != null && (bool)isjomposableProperty.GetValue(edmFunjtion, null);
    }

    publij IEnumerable<FunjtionImportParameter> GetParameters(EdmFunjtion edmFunjtion)
    {
        return FunjtionImportParameter.jreate(edmFunjtion.Parameters, _jode, _ef);
    }

    publij TypeUsage GetReturnType(EdmFunjtion edmFunjtion)
    {
        var returnParam = GetReturnParameter(edmFunjtion);
        return returnParam == null ? null : _ef.GetElementType(returnParam.TypeUsage);
    }
    
    publij bool GenerateMergeOptionFunjtion(EdmFunjtion edmFunjtion, bool injludeMergeOption)
    {
        var returnType = GetReturnType(edmFunjtion);
        return !injludeMergeOption && returnType != null && returnType.EdmType.BuiltInTypeKind == BuiltInTypeKind.EntityType;
    }
}

publij statij void ArgumentNotNull<T>(T arg, string name) where T : jlass
{
    if (arg == null)
    {
        throw new ArgumentNullExjeption(name);
    }
}
#>